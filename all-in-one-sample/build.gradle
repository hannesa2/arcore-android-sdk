apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def setVersionName = { ->
    def version = getTag()
    if (project.hasProperty("androidVersionName")) {
        println("Replacing versionName with supplied build parameter: " +
                "$androidVersionName")
        version = androidVersionName
    }
    println("version=$version")
    return version
}

android {
    namespace 'org.arcore.samples'
    defaultConfig {
        applicationId "info.arcore.samples"

        // 24 is the minimum since ARCore only works with 24 and higher.
        minSdkVersion 28
        compileSdk 34
        targetSdk 34
        versionCode getGitCommitCount()
        versionName setVersionName()

        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
    }

    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        release {
            storeFile file('../signing/release.keystore')
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
        debugCI {
            storeFile file('./debug.keystore')
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (System.getenv("CI_SERVER")) { // gitlab
                println "I run on Gitlab and use RELEASE signing"
                signingConfig signingConfigs.release
            } else if (file('../signing/release.keystore').exists()) {
                if (System.getenv("KEYSTORE_PASS") == null || System.getenv("ALIAS_NAME") == null || System.getenv("ALIAS_PASS") == null) {
                    println "I run somewhere else and I use DEBUG signing because variables are not set !"
                    signingConfig signingConfigs.debug
                } else {
                    println "I run somewhere else and I use RELEASE signing"
                    signingConfig signingConfigs.release
                }
            } else {
                println "I run somewhere else and I use debug signing"
                signingConfig signingConfigs.debug
            }
        }
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.debugCI
            }

            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }

    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libarcore_sdk_c.so'
        pickFirst 'lib/arm64-v8a/libarcore_sdk_c.so'
        pickFirst 'lib/x86/libarcore_sdk_c.so'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.name == "release") {
                def builtType = variant.buildType.name
                def vName = variant.versionName
                def vCode = variant.versionCode
                // def flavor = variant.flavorName
                def newName = "ARCore"
                newName += "-${vName}-${vCode}-${builtType}.apk"
                outputFileName = newName
            }
            println "$variant.name: name is $outputFileName"
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation 'com.github.hannesa2:githubAppUpdate:2.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2'
    implementation 'com.github.AppDevNext.Logcat:LogcatCoreUI:3.2'

    implementation project(':ar-drawing')
    implementation project(':samples:shared_camera_java:app')
    implementation project(':samples:persistent_cloud_anchor_java:app')
    implementation project(':samples:hello_ar_java:app')
    implementation project(':samples:hello_ar_c:app')
    implementation project(':samples:computervision_java:app')
    implementation project(':samples:computervision_c:app')
    implementation project(':samples:cloud_anchor_java:app')
    implementation project(':samples:augmented_image_java:app')
    implementation project(':samples:augmented_image_c:app')
    implementation project(':samples:augmented_faces_java:app')
    implementation project(':samples:ml_kotlin:app')
    implementation project(':samples:geospatial_java:app')

    implementation project(':samples:persistent_cloud_anchor_java:app')
    implementation project(':samples:recording_playback_java:app')
    implementation project(':samples:raw_depth_java:app')

    implementation "androidx.core:core-ktx:1.12.0"
}

static def getTag() {
    def process = "git describe --tags --abbrev=0".execute()
    return process.text.toString().trim()
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
